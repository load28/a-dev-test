# AutoDev Subtask Workflow
# This workflow executes a single subtask using Claude API in Docker

name: 'AutoDev Subtask'
run-name: 'AutoDev Subtask: ${{ inputs.task_title }}'

on:
  workflow_dispatch:
    inputs:
      task_id:
        description: "Subtask ID"
        type: string
        required: true
      composite_task_id:
        description: "Parent composite task ID"
        type: string
        required: true
      task_title:
        description: "Subtask title"
        type: string
        required: true
      prompt:
        description: "Task prompt/description"
        type: string
        required: true
      base_branch:
        description: "Branch to work on"
        type: string
        required: true
      target_branch:
        description: "Target branch for PR (parent composite task branch)"
        type: string
        required: true
      autodev_server_url:
        description: "AutoDev server URL for callbacks"
        type: string
        required: false
        default: "http://localhost:3000"

jobs:
  execute_subtask:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.base_branch }}
          fetch-depth: 0

      - name: Setup environment
        run: |
          echo "TASK_ID=${{ inputs.task_id }}" >> $GITHUB_ENV
          echo "COMPOSITE_TASK_ID=${{ inputs.composite_task_id }}" >> $GITHUB_ENV
          echo "TASK_TITLE=${{ inputs.task_title }}" >> $GITHUB_ENV
          echo "TARGET_BRANCH=${{ inputs.target_branch }}" >> $GITHUB_ENV

      - name: Execute task with Claude API
        id: execute_task
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }} \
            -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            -e GITHUB_REPOSITORY=${{ github.repository }} \
            python:3.11-slim bash -c '

          # Install dependencies
          pip install -q anthropic requests

          # Create Python script for Claude API execution
          cat > /tmp/execute_task.py << "EOFPYTHON"
import os
import json
import anthropic
import requests
import subprocess
from pathlib import Path

def main():
    api_key = os.environ.get("ANTHROPIC_API_KEY")
    if not api_key:
        raise ValueError("ANTHROPIC_API_KEY is required")

    prompt = """${{ inputs.prompt }}"""
    task_id = "${{ inputs.task_id }}"

    client = anthropic.Anthropic(api_key=api_key)

    # Read repository structure
    workspace = Path("/workspace")
    repo_structure = []
    for path in workspace.rglob("*"):
        if path.is_file() and not any(part.startswith(".") for part in path.parts):
            rel_path = path.relative_to(workspace)
            if path.stat().st_size < 100000:  # Only include files < 100KB
                repo_structure.append(str(rel_path))

    system_prompt = f"""You are an expert software engineer working on a specific task.

Repository structure:
{chr(10).join(repo_structure[:50])}  # Limit to first 50 files

Your task:
{prompt}

IMPORTANT:
1. Make focused changes related ONLY to this specific task
2. Do not modify files outside the scope of this task
3. Create clear, atomic commits
4. Write comprehensive commit messages
5. Ensure code quality and add tests if needed

Please analyze the codebase, make the necessary changes, and provide:
1. List of files to create/modify
2. Exact content for each file
3. Commit message
"""

    print("Calling Claude API (claude-sonnet-4-5)...")
    message = client.messages.create(
        model="claude-sonnet-4-5-20250929",
        max_tokens=8192,
        temperature=0.2,
        system=system_prompt,
        messages=[
            {
                "role": "user",
                "content": f"Please complete the task: {prompt}"
            }
        ]
    )

    response_text = message.content[0].text
    print(f"Claude response received ({len(response_text)} chars)")

    # Save response for debugging
    with open("/workspace/claude_response.txt", "w") as f:
        f.write(response_text)

    print("Task analysis completed by Claude API")
    print("Note: This is a simplified workflow. Actual file modifications")
    print("would require parsing Claude'\''s response and applying changes.")

    # For now, create a simple change indicator
    with open(f"/workspace/.autodev-task-{task_id}.txt", "w") as f:
        f.write(f"Task {task_id} executed\\n")
        f.write(f"Prompt: {prompt}\\n")
        f.write(f"Response length: {len(response_text)} chars\\n")

if __name__ == "__main__":
    main()
EOFPYTHON

          python /tmp/execute_task.py
          '
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Commit changes
        id: commit
        run: |
          git config user.name "AutoDev Bot"
          git config user.email "autodev@github-actions.bot"

          git add -A

          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            COMMIT_MSG="AutoDev: ${{ inputs.task_title }}

Task ID: ${{ inputs.task_id }}
Composite Task: ${{ inputs.composite_task_id }}

${{ inputs.prompt }}

Generated with AutoDev
Co-Authored-By: Claude <noreply@anthropic.com>"

            git commit -m "$COMMIT_MSG"
            git push origin ${{ inputs.base_branch }}
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.commit.outputs.has_changes == 'true'
        id: create_pr
        run: |
          PR_BODY="## Subtask: ${{ inputs.task_title }}

**Task ID:** \`${{ inputs.task_id }}\`
**Composite Task:** \`${{ inputs.composite_task_id }}\`

### Description
${{ inputs.prompt }}

### Changes
This PR contains the automated changes for this subtask.

---
Generated with AutoDev"

          PR_JSON=$(gh pr create \
            --base "${{ inputs.target_branch }}" \
            --head "${{ inputs.base_branch }}" \
            --title "AutoDev: ${{ inputs.task_title }}" \
            --body "$PR_BODY" \
            --json number,url)

          echo "PR created: $PR_JSON"

          PR_NUMBER=$(echo $PR_JSON | jq -r '.number')
          PR_URL=$(echo $PR_JSON | jq -r '.url')

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify AutoDev Server
        if: always()
        run: |
          SUCCESS="true"
          ERROR_MSG=""

          if [ "${{ job.status }}" != "success" ]; then
            SUCCESS="false"
            ERROR_MSG="Workflow failed with status: ${{ job.status }}"
          fi

          PR_NUMBER="${{ steps.create_pr.outputs.pr_number }}"
          PR_URL="${{ steps.create_pr.outputs.pr_url }}"

          if [ -z "$PR_NUMBER" ]; then
            PR_NUMBER="null"
          fi

          if [ -z "$PR_URL" ]; then
            PR_URL="null"
          else
            PR_URL="\"$PR_URL\""
          fi

          PAYLOAD=$(cat <<EOF
          {
            "task_id": "${{ inputs.task_id }}",
            "composite_task_id": "${{ inputs.composite_task_id }}",
            "repository_owner": "${{ github.repository_owner }}",
            "repository_name": "${{ github.event.repository.name }}",
            "pr_number": $PR_NUMBER,
            "pr_url": $PR_URL,
            "success": $SUCCESS,
            "error": $([ -z "$ERROR_MSG" ] && echo "null" || echo "\"$ERROR_MSG\"")
          }
EOF
          )

          echo "Notifying AutoDev server..."
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "${{ inputs.autodev_server_url }}/callbacks/workflow-complete" \
            || echo "Failed to notify server (non-fatal)"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
