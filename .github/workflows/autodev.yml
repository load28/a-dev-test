# AutoDev Workflow
# This workflow executes tasks using Claude Code CLI

name: 'AutoDev'
run-name: 'AutoDev: ${{ inputs.task_title }}'

on:
  workflow_dispatch:
    inputs:
      task_id:
        description: "Task ID"
        type: string
        required: true
      composite_task_id:
        description: "Parent composite task ID (or 'standalone')"
        type: string
        required: true
      task_title:
        description: "Task title"
        type: string
        required: true
      prompt:
        description: "Task prompt/description"
        type: string
        required: true
      base_branch:
        description: "Branch to work on"
        type: string
        required: true
      target_branch:
        description: "Target branch for PR"
        type: string
        required: true
      autodev_server_url:
        description: "AutoDev server URL for callbacks"
        type: string
        required: false
        default: "http://localhost:3000"

jobs:
  execute_task:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.base_branch }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code CLI
        run: npm install -g @anthropic-ai/claude-code

      - name: Configure Git
        run: |
          git config user.name "AutoDev Bot"
          git config user.email "autodev@github-actions.bot"

      - name: Execute task with Claude Code
        id: claude_execution
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "============================================================"
          echo "AutoDev Task Executor (Claude Code CLI)"
          echo "Task ID: ${{ inputs.task_id }}"
          echo "Task: ${{ inputs.task_title }}"
          echo "============================================================"
          echo ""

          # Execute Claude Code in non-interactive mode with automatic file editing
          # Note: --print flag is removed to enable actual file modifications
          # Note: --max-turns is not specified to allow completion of complex tasks
          # https://docs.claude.com/en/docs/claude-code/headless
          # https://docs.claude.com/en/docs/claude-code/cli-reference

          # Create enhanced prompt with system instructions
          cat > /tmp/claude_prompt.txt << 'PROMPT_EOF'
SYSTEM INSTRUCTIONS - CRITICAL - MUST FOLLOW EXACTLY

You are AutoDev, an autonomous code modification system running in a non-interactive GitHub Actions environment.

ABSOLUTE RULES (NO EXCEPTIONS):

1. NEVER ASK QUESTIONS - You cannot ask users anything. Make all decisions autonomously.
2. ALWAYS MODIFY FILES - You must produce file changes. Never just provide analysis.
3. NO CONFIRMATION REQUESTS - Never ask "Would you like me to...?" or "Should I...?"
4. DETERMINISTIC EXECUTION - Always produce concrete file modifications.
5. AUTONOMOUS DECISION-MAKING - Choose the most reasonable implementation yourself.

When you find existing code:

- DO NOT ask if changes are needed
- DO NOT ask how to modify it
- DO NOT just analyze and explain
- INSTEAD: Automatically enhance, refactor, or improve the code:
  - Add better comments and documentation
  - Improve TypeScript types
  - Add error handling
  - Refactor for better readability
  - Add missing edge cases
  - Follow best practices
  - Fix any code smells

When code doesn't exist:

- CREATE IT from scratch following the requirements
- Use industry best practices
- Follow the existing codebase patterns and style
- Add proper types, comments, and error handling

If requirements are ambiguous:

- MAKE THE BEST DECISION based on:
  - Common software engineering practices
  - Patterns in the existing codebase
  - Framework conventions (React, Next.js, etc.)
- DO NOT ask for clarification - implement the most reasonable solution

Output Requirements:

- You MUST modify at least one file
- Changes MUST be committed to git
- If you think no changes are needed, improve the code anyway (refactor, document, etc.)

=============================================================================

TASK DETAILS:

${{ inputs.prompt }}

=============================================================================

EXECUTION:

Now implement this task immediately. Make concrete file modifications. Do not ask any questions.
PROMPT_EOF

          # Execute Claude Code with enhanced prompt
          claude \
            --dangerously-skip-permissions \
            --allowedTools "Bash,Read,Write,Edit,Glob,Grep" \
            --model sonnet \
            "$(cat /tmp/claude_prompt.txt)"

          echo ""
          echo "✓ Claude Code execution completed"

      - name: Commit and push changes
        id: commit
        run: |
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            git commit -m "AutoDev: ${{ inputs.task_title }}

          Task ID: ${{ inputs.task_id }}
          Composite Task: ${{ inputs.composite_task_id }}

          ${{ inputs.prompt }}

          Generated with AutoDev
          Co-Authored-By: Claude <noreply@anthropic.com>"
            git push origin ${{ inputs.base_branch }}
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.commit.outputs.has_changes == 'true'
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat > /tmp/pr_body.md << 'EOFPR'
Task: ${{ inputs.task_title }}

**Task ID:** `${{ inputs.task_id }}`
**Composite Task:** `${{ inputs.composite_task_id }}`

Description:
${{ inputs.prompt }}

Changes:
This PR contains the automated changes for this task.

---
🤖 Generated with [AutoDev](https://github.com/load28/a-dev)
Powered by Claude 4.5 Sonnet
EOFPR

          PR_URL=$(gh pr create \
            --base "${{ inputs.target_branch }}" \
            --head "${{ inputs.base_branch }}" \
            --title "AutoDev: ${{ inputs.task_title }}" \
            --body-file /tmp/pr_body.md)

          echo "PR created: $PR_URL"

          # URL에서 PR 번호 추출 (예: https://github.com/owner/repo/pull/123 -> 123)
          PR_NUMBER=$(echo "$PR_URL" | sed 's/.*\/pull\///')

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT

      - name: Notify AutoDev Server
        if: always()
        run: |
          SUCCESS="true"
          ERROR_MSG=""

          if [ "${{ job.status }}" != "success" ]; then
            SUCCESS="false"
            ERROR_MSG="Workflow failed with status: ${{ job.status }}"
          fi

          PR_NUMBER="${{ steps.create_pr.outputs.pr_number }}"
          PR_URL="${{ steps.create_pr.outputs.pr_url }}"

          if [ -z "$PR_NUMBER" ]; then
            PR_NUMBER="null"
          fi

          if [ -z "$PR_URL" ]; then
            PR_URL="null"
          else
            PR_URL="\"$PR_URL\""
          fi

          PAYLOAD=$(cat <<EOF
          {
            "task_id": "${{ inputs.task_id }}",
            "composite_task_id": "${{ inputs.composite_task_id }}",
            "repository_owner": "${{ github.repository_owner }}",
            "repository_name": "${{ github.event.repository.name }}",
            "pr_number": $PR_NUMBER,
            "pr_url": $PR_URL,
            "success": $SUCCESS,
            "error": $([ -z "$ERROR_MSG" ] && echo "null" || echo "\"$ERROR_MSG\"")
          }
          EOF
          )

          echo "Notifying AutoDev server..."
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "${{ inputs.autodev_server_url }}/callbacks/workflow-complete" \
            || echo "Failed to notify server (non-fatal)"
