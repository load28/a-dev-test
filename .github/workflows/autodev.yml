# AutoDev GitHub Actions Workflow
# 이 workflow는 AutoDev 엔진이 트리거하여 AI 에이전트를 실행하고 PR을 생성합니다

name: AutoDev - AI Development Automation

on:
  # AutoDev 엔진에서 수동으로 트리거
  workflow_dispatch:
    inputs:
      task_id:
        description: 'Task ID'
        required: true
        type: string
      branch:
        description: 'Branch name for the changes'
        required: true
        type: string
      commit_message:
        description: 'Commit message'
        required: true
        type: string
      prompt:
        description: 'AI agent prompt'
        required: false
        type: string

  # PR 이벤트 (리뷰 처리, CI 실패 처리)
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

jobs:
  # AI 에이전트 실행 및 PR 생성
  execute_task:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install Claude Code CLI
        run: |
          # Claude Code CLI 설치 (실제 설치 방법에 따라 수정)
          echo "Installing Claude Code CLI..."
          # curl -fsSL https://claude.ai/install.sh | sh

      - name: Execute AI Agent
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          TASK_ID: ${{ inputs.task_id }}
          BRANCH_NAME: ${{ inputs.branch }}
        run: |
          echo "Executing AI agent for task: $TASK_ID"

          # 브랜치 생성
          git checkout -b "$BRANCH_NAME"

          # Claude Code 실행
          # claude-code "${{ inputs.prompt }}" --auto-commit

          # 시뮬레이션: 임시 파일 생성
          mkdir -p src
          echo "// Task: ${{ inputs.task_id }}" > src/task_$TASK_ID.rs
          echo "// Generated by AutoDev" >> src/task_$TASK_ID.rs

      - name: Commit changes
        run: |
          git config user.name "AutoDev Bot"
          git config user.email "autodev@github.com"
          git add .
          git commit -m "${{ inputs.commit_message }}" || echo "No changes to commit"

      - name: Push changes
        run: |
          git push origin "${{ inputs.branch }}"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ inputs.branch }}
          title: "${{ inputs.commit_message }}"
          body: |
            ## AutoDev Task

            **Task ID:** `${{ inputs.task_id }}`
            **Branch:** `${{ inputs.branch }}`

            This PR was automatically generated by AutoDev.

            ### Changes
            - Automated code generation by AI agent

            ---
            *Generated by AutoDev - AI Development Automation*
          labels: autodev, automated

  # PR 리뷰 자동 처리
  handle_review:
    if: github.event_name == 'pull_request_review'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Check if AutoDev PR
        id: check_autodev
        run: |
          if [[ "${{ github.event.pull_request.title }}" == *"AutoDev"* ]] || \
             [[ "${{ github.event.pull_request.labels }}" == *"autodev"* ]]; then
            echo "is_autodev=true" >> $GITHUB_OUTPUT
          else
            echo "is_autodev=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Rust
        if: steps.check_autodev.outputs.is_autodev == 'true'
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install Claude Code CLI
        if: steps.check_autodev.outputs.is_autodev == 'true'
        run: |
          echo "Installing Claude Code CLI..."

      - name: Apply review feedback
        if: steps.check_autodev.outputs.is_autodev == 'true'
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          REVIEW_BODY: ${{ github.event.review.body }}
        run: |
          echo "Applying review feedback..."

          # Claude Code로 리뷰 코멘트에 대응
          # claude-code "Apply these review comments: $REVIEW_BODY" --auto-commit

          # 변경사항 커밋
          git config user.name "AutoDev Bot"
          git config user.email "autodev@github.com"
          git add .
          git commit -m "fix: apply review feedback" || echo "No changes needed"
          git push

      - name: Comment on PR
        if: steps.check_autodev.outputs.is_autodev == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Applied fixes based on review comments automatically.'
            })

  # CI 실패 자동 수정
  handle_ci_failure:
    if: github.event_name == 'pull_request' && failure()
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Check if AutoDev PR
        id: check_autodev
        run: |
          if [[ "${{ github.event.pull_request.labels }}" == *"autodev"* ]]; then
            echo "is_autodev=true" >> $GITHUB_OUTPUT
          else
            echo "is_autodev=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Rust
        if: steps.check_autodev.outputs.is_autodev == 'true'
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install Claude Code CLI
        if: steps.check_autodev.outputs.is_autodev == 'true'
        run: |
          echo "Installing Claude Code CLI..."

      - name: Fix CI failures
        if: steps.check_autodev.outputs.is_autodev == 'true'
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "Analyzing CI failures..."

          # CI 로그 수집
          # CI_LOGS=$(gh run view ${{ github.run_id }} --log)

          # Claude Code로 CI 실패 수정
          # claude-code "Fix these CI failures: $CI_LOGS" --auto-commit

          # 변경사항 커밋
          git config user.name "AutoDev Bot"
          git config user.email "autodev@github.com"
          git add .
          git commit -m "fix: resolve CI failures" || echo "No fixes needed"
          git push

      - name: Comment on PR
        if: steps.check_autodev.outputs.is_autodev == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🔧 Fixed CI failures automatically.'
            })