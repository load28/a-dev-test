# AutoDev Workflow
# This workflow executes tasks using Claude 4.5 Sonnet API via Docker Action

name: 'AutoDev'
run-name: 'AutoDev: ${{ inputs.task_title }}'

on:
  workflow_dispatch:
    inputs:
      task_id:
        description: "Task ID"
        type: string
        required: true
      composite_task_id:
        description: "Parent composite task ID (or 'standalone')"
        type: string
        required: true
      task_title:
        description: "Task title"
        type: string
        required: true
      prompt:
        description: "Task prompt/description"
        type: string
        required: true
      base_branch:
        description: "Branch to work on"
        type: string
        required: true
      target_branch:
        description: "Target branch for PR"
        type: string
        required: true
      autodev_server_url:
        description: "AutoDev server URL for callbacks"
        type: string
        required: false
        default: "http://localhost:3000"

jobs:
  execute_task:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.base_branch }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install anthropic

      - name: Execute task with Claude 4.5 Sonnet
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          TASK_PROMPT: ${{ inputs.prompt }}
          TASK_ID: ${{ inputs.task_id }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          python << 'EOFPYTHON'
          import os
          import sys
          from pathlib import Path

          try:
              import anthropic
          except ImportError:
              print("ERROR: anthropic package not installed", file=sys.stderr)
              sys.exit(1)

          def get_repository_structure(workspace_path, max_files=50):
              repo_structure = []
              workspace = Path(workspace_path)

              if not workspace.exists():
                  return []

              for path in workspace.rglob("*"):
                  if path.is_file() and not any(part.startswith(".") for part in path.parts):
                      try:
                          rel_path = path.relative_to(workspace)
                          if path.stat().st_size < 100000:
                              repo_structure.append(str(rel_path))
                      except:
                          continue

              return repo_structure[:max_files]

          def main():
              print("=" * 60)
              print("AutoDev Task Executor (Claude 4.5 Sonnet)")
              print("=" * 60)

              api_key = os.environ.get("ANTHROPIC_API_KEY")
              task_prompt = os.environ.get("TASK_PROMPT", "")
              task_id = os.environ.get("TASK_ID", "unknown")
              workspace = os.environ.get("GITHUB_WORKSPACE", ".")

              if not api_key:
                  print("ERROR: ANTHROPIC_API_KEY required", file=sys.stderr)
                  sys.exit(1)

              if not task_prompt:
                  print("ERROR: TASK_PROMPT required", file=sys.stderr)
                  sys.exit(1)

              print(f"Task ID: {task_id}")
              print(f"Workspace: {workspace}")
              print()

              print("Analyzing repository...")
              repo_structure = get_repository_structure(workspace)
              print(f"Found {len(repo_structure)} files")
              print()

              files_list = "\n".join(repo_structure) if repo_structure else "(No files)"
              system_prompt = f"""You are an expert software engineer.

          Repository structure:
          {files_list}

          Task: {task_prompt}

          IMPORTANT:
          1. Make focused changes for this specific task only
          2. Do not modify unrelated files
          3. Write clear commit messages
          4. Ensure code quality

          Provide:
          1. Files to create/modify
          2. Exact file contents
          3. Commit message
          """

              print("Calling Claude API...")
              client = anthropic.Anthropic(api_key=api_key)

              try:
                  message = client.messages.create(
                      model="claude-sonnet-4-5-20250929",
                      max_tokens=8192,
                      temperature=0.2,
                      system=system_prompt,
                      messages=[{"role": "user", "content": f"Complete: {task_prompt}"}]
                  )

                  response_text = message.content[0].text
                  print(f"✓ Response received ({len(response_text)} chars)")

                  with open(os.path.join(workspace, "claude_response.txt"), "w") as f:
                      f.write(response_text)

                  with open(os.path.join(workspace, f".autodev-task-{task_id}.txt"), "w") as f:
                      f.write(f"Task {task_id} executed\n")
                      f.write(f"Prompt: {task_prompt}\n")
                      f.write(f"Response: {len(response_text)} chars\n")

                  print("✓ Task completed")
                  return 0

              except Exception as e:
                  print(f"ERROR: {e}", file=sys.stderr)
                  return 1

          if __name__ == "__main__":
              sys.exit(main())
          EOFPYTHON

      - name: Commit changes
        id: commit
        run: |
          git config user.name "AutoDev Bot"
          git config user.email "autodev@github-actions.bot"
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            git commit -m "AutoDev: ${{ inputs.task_title }}

          Task ID: ${{ inputs.task_id }}
          Composite Task: ${{ inputs.composite_task_id }}

          ${{ inputs.prompt }}

          Generated with AutoDev
          Co-Authored-By: Claude <noreply@anthropic.com>"
            git push origin ${{ inputs.base_branch }}
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.commit.outputs.has_changes == 'true'
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat > /tmp/pr_body.md << 'EOFPR'
          ## Task: ${{ inputs.task_title }}

          **Task ID:** `${{ inputs.task_id }}`
          **Composite Task:** `${{ inputs.composite_task_id }}`

          ### Description
          ${{ inputs.prompt }}

          ### Changes
          This PR contains the automated changes for this task.

          ---
          🤖 Generated with [AutoDev](https://github.com/load28/a-dev)
          Powered by Claude 4.5 Sonnet
          EOFPR

          PR_URL=$(gh pr create \
            --base "${{ inputs.target_branch }}" \
            --head "${{ inputs.base_branch }}" \
            --title "AutoDev: ${{ inputs.task_title }}" \
            --body-file /tmp/pr_body.md)

          echo "PR created: $PR_URL"

          # URL에서 PR 번호 추출 (예: https://github.com/owner/repo/pull/123 -> 123)
          PR_NUMBER=$(echo "$PR_URL" | sed 's/.*\/pull\///')

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT

      - name: Notify AutoDev Server
        if: always()
        run: |
          SUCCESS="true"
          ERROR_MSG=""

          if [ "${{ job.status }}" != "success" ]; then
            SUCCESS="false"
            ERROR_MSG="Workflow failed with status: ${{ job.status }}"
          fi

          PR_NUMBER="${{ steps.create_pr.outputs.pr_number }}"
          PR_URL="${{ steps.create_pr.outputs.pr_url }}"

          if [ -z "$PR_NUMBER" ]; then
            PR_NUMBER="null"
          fi

          if [ -z "$PR_URL" ]; then
            PR_URL="null"
          else
            PR_URL="\"$PR_URL\""
          fi

          PAYLOAD=$(cat <<EOF
          {
            "task_id": "${{ inputs.task_id }}",
            "composite_task_id": "${{ inputs.composite_task_id }}",
            "repository_owner": "${{ github.repository_owner }}",
            "repository_name": "${{ github.event.repository.name }}",
            "pr_number": $PR_NUMBER,
            "pr_url": $PR_URL,
            "success": $SUCCESS,
            "error": $([ -z "$ERROR_MSG" ] && echo "null" || echo "\"$ERROR_MSG\"")
          }
          EOF
          )

          echo "Notifying AutoDev server..."
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "${{ inputs.autodev_server_url }}/callbacks/workflow-complete" \
            || echo "Failed to notify server (non-fatal)"
